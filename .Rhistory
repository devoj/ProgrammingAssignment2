flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime("t3, "%B %d, %Y %H:%M)
t4 <- strptime("t3, "%B %d, %Y %H:%M"")
t4 <- strptime("t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
?plot
?par
plot(cars)
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data(mtcars)
dim(mtcars)
play90
play()
dim(mtcars)
head(mtcars)
colnames(mtcars)
tail(mtcars)
class(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcrs$mpg)
hist(mtcars$mpg)
rm(list = ls())
read.csv(A012913postf)
read.table(012913postf, sep = ",")
read.table(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT")
View(`012913postf`)
summary(012913postf)
012913postf
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT")
View(`012913postf`)
012913postf
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
012913postf
View(`012913postf`)
View(`012913postf`)
View(012913postf)
012913postf
012913postf$Xt
012913postf$DH
dta <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
dta
class(dta)
dta <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
dta
summary(dta)
plot(dta$inj, dta$DH)
plot(dta$INJV, dta$DH)
plot(dta$INJV[2:25], dta$DH[2:25])
plot(dta$XMt, dta$DH)
hist(dt$XMt)
names(dta)
class(dta)
plot(dta$XMt[3:25], dta$DH[3:25])
plot(dta$XMt[4:25], dta$DH[4:25])
plot(dta$XMt[4:25], dta$DH[4:25], xlab = "[ligand]", ylab = "Heat of inj", main = "CA-EDTA Titration")
library(swirl)
rm(list=ls())
source()
search()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("slidify")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("devtools")
require("devtools")
install.packages("Rtools")
version
require("devtools")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
getwd()
ls
ls()
dir()
ls()
dir()
getwd()
dir()
rfunct
rfunct()
./rfunct
dir()
getwd()
dir()
rfunct.r
./rfunct.r
ls()
dir()
"rfunct.R"
myfunction()
"rfunct.R"
myfunction()
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
x <- rnorm(100)
mean(x)
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
library("swirl")
swirl()
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
x + 555 + z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, ,100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
bye()
install.packages("rmarkdown")
library("rmarkdown")
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Sys.time()
x <- Sys.time()
unclass(x)
weekdays(x)
months(x)
names(unclass(x))
p <- as.POSIXlt(x)
p$sec
unclass(p)
names(unclass(p))
cube <- function(x, n) {}
x^3
cube <- function(x, n) {x^3}
cube(3)
?cor
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript.R")
source("submitscript1.R")
source("submitscript1.R")
?list
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- list(1, 2, 3, 4, 5)
makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector(x)
values <- makevector(x)
values
class(values)
summary(values)
makevector()
rm(list = ls())
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector()
cachemean()
x = c(1, 2, 3, 5, 10)
cacemean(x)
cachemean(x)
x <- as.list(x)
x
summary(x)
x
cachemean(x)
makevector(x)
cachemean(x)
x <- c(1, 2, 3, 4, 5)
makevector(x)
cachemean(x)
class(x)
makevector(x = numeric())
cachemean(4)
cachemean(makevector(x))
rm(list = ls())
ls()
makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector(x)
cachemean(4, 5, 6)
cachemean(c(4, 5, 6))
cachemean(makevector(c(4, 5, 6)))
cachemean(x, c(4, 5, 6))
x <- makevector()
cachemean(x, c(4, 5, 6))
z <- c(4, 5, 6)
cachemean(x, z)
class(z)
?function
q
?function
:
rm(list = ls())
?function()
q
?function
?meant
?mean
?function
q
??function
q
source('~/Coursera/R Programming/Programming assignment 2/test.r')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- 1:10
x
xx <- makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/test.r')
xx <- makeVector(x)
xx
summar(xx)
summary(xx)
xx$set
XX$get
xx$get
xx$get()
xx$set()
xx$setmeant(mean(x))
xx$setmean(mean(x))
xx$getmeant()
xx$getmean()
xx$setmean("Hi")
xx$getmean()
xx$setmean(mean(x))
xx$getmean()
x
m
y
ls()
xx
summary(xx$get)
summary(xx$get())
xx
xx$getmean
xx$getmean[m]
xx$getmean["m"]
cachmean(x)
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachevector(xx)
cachemean(xx)
cachemean(xx)
x
xx
library
dir
dir()
ls()
env()
??environment
xx$set
class(xx$set)
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachemean(xx)
cachemean(xx)
x <- 1:1000000000
x <- 1:100000000
mean(x)
mean(x)
y < 1:10
y <- 1:10
mean(y)
mean(x)
mean(x)
mean(x)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(x)
rm(x)
ls()
rm(list = ls())
x <- 1:100000000
ls()
x
rm(x)
ls()
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- 1:1000
makeVector(x)
makeVector(x) -> xx
summary(xx)
xx$get()
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
getwd()
setwd("/Users/Davin/Documents/GitHub/ProgrammingAssignment2/")
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
ls()
rm(list = ls())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
matri
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
matri
ls()
xx <- makeCacheMatrix(matri)
summary(xx)
xx$getmatrix
xx$get_matrix
xx$get_matrix()
xx$get_inv()
xx$compute_inv
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
xx <- makeCacheMatrix(matri)
summary(xx)
xx$get_matrix
xx$get_matrix()
xx$compute_matrix
xx$compute_inv
xx$compute_inv()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
xx <- makeCacheMatrix(matri)
xx$compute_inv
xx$compute_inv()
xx$compute_inv(solve(mat))
xx$compute_inv(solve(matri))
xx$get_inv
xx$get_inv()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matri)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
sub <- makeCacheMatrix(matri)
sub
sub$get_matrix
sub$compute_inv(solve(x))
sub$compute_inv(solve(matri))
sub$get_inv
sub$get_inv()
matri_inv <- sub$get_inv
matri_inv
matri_inv <- sub$get_inv()
matri_inv
sub$set(matri_inv)
sub$get_matrix()
sub$compute_inv(matri_inv)
sub$compute_inv(solve(matri_inv)
)
sub$get_inv()
matri
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
rm(list = ls())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
xx <- makeCacheMatrix(matrix)
cacheSolve(matri)
xx <- makeCacheMatrix(matri)
ls()
cacheSolve(xx)
cacheSolve(matri)
debug(cacheSolve)
cacheSolve(xx)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
xx <- makeCacheMatrix(matri)
cacheSolve(xx)
cacheSolve(xx)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/tstmatrix.R')
xx <- makeCacheMatrix(matri)
cacheSolve(xx)
cacheSolve(xx)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
